<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.hospital.dao.PatientMapper">
  <resultMap id="BaseResultMap" type="com.example.hospital.model.Patient">
    <id column="patient_id" jdbcType="INTEGER" property="patientId" />
    <result column="patient_name" jdbcType="VARCHAR" property="patientName" />
    <result column="patient_sex" jdbcType="INTEGER" property="patientSex" />
    <result column="patient_birthday" jdbcType="TIMESTAMP" property="patientBirthday" />
    <result column="nation_id" jdbcType="INTEGER" property="nationId" />
    <result column="outpatient_service" jdbcType="VARCHAR" property="outpatientService" />
    <result column="hospitalization_number" jdbcType="VARCHAR" property="hospitalizationNumber" />
    <result column="disease_name" jdbcType="VARCHAR" property="diseaseName" />
    <result column="disease" jdbcType="VARCHAR" property="disease" />
    <result column="result_level" jdbcType="VARCHAR" property="resultLevel" />
    <result column="lead_off" jdbcType="INTEGER" property="leadOff" />
      <result column="is_del" jdbcType="TINYINT" property="isDel" />
      <result column="department_id" jdbcType="INTEGER" property="departmentId" />


  </resultMap>
    <resultMap id="super" type="com.example.hospital.dto.SuperPatient" extends="BaseResultMap">
        <result column="dictionary_id" javaType="INTEGER" property="dictionaryId"/>
        <result column="dictionary_name" jdbcType="VARCHAR" property="dictionaryName" />
    </resultMap>

    <resultMap id="SuperResultMap" type="com.example.hospital.dto.SuperPatient" extends="BaseResultMap">
    <association property="planningGroups" javaType="com.example.hospital.model.PlanningGroup">
      <id column="planning_id" jdbcType="INTEGER" property="planningId" />
      <result column="p_group_id" jdbcType="INTEGER" property="pGroupId" />
      <result column="p_patient_id" jdbcType="INTEGER" property="pPatientId" />
      <result column="in_group_time" jdbcType="TIMESTAMP" property="inGroupTime" />
    </association>
  </resultMap>

  <resultMap id="followUpMap" type="com.example.hospital.dto.FollowUpPatient" extends="BaseResultMap">
    <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    <result column="group_id" jdbcType="INTEGER" property="groupId" />
    <result column="in_group_time" jdbcType="TIMESTAMP" property="inGroupTime" />
    <result column="follow_time" jdbcType="TIMESTAMP" property="followTime" />
    <result column="follow_state" jdbcType="TINYINT" property="followState" />
    <result column="department_name" jdbcType="VARCHAR" property="departmentName" />
    <result column="group_department_id" jdbcType="INTEGER" property="groupDepartmentId" />
    <result column="follow_id" jdbcType="INTEGER" property="followId" />
  </resultMap>
  <sql id="Base_Column_List">
    patient_id, patient_name, patient_sex, patient_birthday, nation_id, outpatient_service, 
    hospitalization_number, disease_name, disease, result_level, is_del
  </sql>
<!--我写的sql语句-->
  <select id="selectPatientsByGroupId" resultMap="SuperResultMap">
    select
    p.*,pg.in_group_time,pg.p_group_id
    from `patient` p,`planning_group` pg
      where
      p.patient_id=pg.p_patient_id
      and p.is_del=0
      and pg.p_group_id=#{group1}
    <if test="superPatient.outpatientService != null and superPatient.outpatientService != ''" >
    and p.outpatient_service like CONCAT('%',#{superPatient.outpatientService},'%')
    </if>
    <if test="superPatient.hospitalizationNumber !=null and superPatient.hospitalizationNumber !=''">
      and p.hospitalization_number like  CONCAT('%',#{superPatient.hospitalizationNumber},'%')
    </if>
    <if test="superPatient.patientSex !=null " >
      and p.patient_sex = ${superPatient.patientSex}
    </if>
    <if test="superPatient.patientName !=null and  superPatient.patientName !='' " >
      and p.patient_name like   CONCAT('%',#{superPatient.patientName},'%')
    </if>
    <if test="time1 !=null and time2 !=null" >
      and pg.in_group_time between #{time1} and #{time2}
    </if>
    <if test="time1 ==null and time2 !=null" >
      and pg.in_group_time &lt;= #{time2}
    </if>
    <if test="time1 !=null and time2 ==null" >
    and pg.in_group_time &gt;=  #{time1}
    </if>
  </select>

  <!--随访进度管理页面查询语句-->
  <select id="followUpManagementData" resultMap="followUpMap">
      SELECT a.*,n.follow_time from(
      SELECT
          p.patient_id,
          p.outpatient_service,
          p.hospitalization_number,
          gg.group_name,
          p.patient_name,
          p.patient_sex,
          p.patient_birthday,
          g.in_group_time,
          f.follow_state,
          d.dictionary_name AS department_name,
          gg.group_department_id,
          f.follow_id
      FROM
          planning_group g,
          patient p,
          follow_up_rule r,
          groups gg,
          follow_up f,
          dictionary d
      WHERE
      gg.group_department_id = d.dictionary_id
      AND g.p_patient_id = p.patient_id
      AND g.p_group_id = gg.group_id
      AND p.patient_id = f.follow_patient_id
      <if test="startDate=='' and endDate=='' ">
          AND f.follow_time BETWEEN CONCAT(CURDATE(), ' 00:00:00')
          AND CONCAT(CURDATE(), ' 23:59:59')
      </if>
      <if test="startDate!='' and endDate!='' ">
          AND f.follow_time BETWEEN CONCAT(#{startDate}, ' 00:00:00')
          AND CONCAT(#{endDate}, ' 23:59:59')
      </if>
      <if test="followUpPatient.groupId != null">
          AND gg.group_id=#{followUpPatient.groupId}
      </if>
      <if test="followUpPatient.groupDepartmentId != null">
          AND gg.group_department_id=#{followUpPatient.groupDepartmentId}
      </if>
      <if test="followUpPatient.outpatientService != null and followUpPatient.outpatientService != '' ">
          AND p.outpatient_service like CONCAT('%',#{followUpPatient.outpatientService},'%')
      </if>
      <if test="followUpPatient.hospitalizationNumber != null and followUpPatient.hospitalizationNumber != '' ">
          AND p.hospitalization_number like CONCAT('%',#{followUpPatient.hospitalizationNumber},'%')
      </if>
      <if test="followUpPatient.patientName != null and followUpPatient.patientName != '' ">
          AND p.patient_name like CONCAT('%',#{followUpPatient.patientName},'%')
      </if>
      <if test="followUpPatient.followState != null">
          AND f.follow_state=#{followUpPatient.followState}
      </if>
      ) as a LEFT JOIN 	(
          SELECT
          follow_time,
          follow_patient_id
          FROM
          follow_up
      WHERE follow_time > NOW()
      ) AS n ON a.patient_id = n.follow_patient_id
  </select>
    <!--批量删除-->
    <update id="deleteById">
        update `patient` set  is_del=1 where patient_id=#{ids}
    </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `patient`
    where patient_id = #{patientId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `patient`
    where patient_id = #{patientId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.hospital.model.Patient">
    insert into `patient` (patient_id, patient_name, patient_sex,
      patient_birthday, nation_id, outpatient_service, 
      hospitalization_number, disease_name, disease, 
      result_level, is_del)
    values (#{patientId,jdbcType=INTEGER}, #{patientName,jdbcType=VARCHAR}, #{patientSex,jdbcType=VARCHAR}, 
      #{patientBirthday,jdbcType=TIMESTAMP}, #{nationId,jdbcType=INTEGER}, #{outpatientService,jdbcType=INTEGER}, 
      #{hospitalizationNumber,jdbcType=INTEGER}, #{diseaseName,jdbcType=VARCHAR}, #{disease,jdbcType=VARCHAR}, 
      #{resultLevel,jdbcType=VARCHAR}, #{isDel,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.example.hospital.model.Patient">
    insert into `patient`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="patientId != null">
        patient_id,
      </if>
      <if test="patientName != null">
        patient_name,
      </if>
      <if test="patientSex != null">
        patient_sex,
      </if>
      <if test="patientBirthday != null">
        patient_birthday,
      </if>
      <if test="nationId != null">
        nation_id,
      </if>
      <if test="outpatientService != null">
        outpatient_service,
      </if>
      <if test="hospitalizationNumber != null">
        hospitalization_number,
      </if>
      <if test="diseaseName != null">
        disease_name,
      </if>
      <if test="disease != null">
        disease,
      </if>
      <if test="resultLevel != null">
        result_level,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="patientId != null">
        #{patientId,jdbcType=INTEGER},
      </if>
      <if test="patientName != null">
        #{patientName,jdbcType=VARCHAR},
      </if>
      <if test="patientSex != null">
        #{patientSex,jdbcType=VARCHAR},
      </if>
      <if test="patientBirthday != null">
        #{patientBirthday,jdbcType=TIMESTAMP},
      </if>
      <if test="nationId != null">
        #{nationId,jdbcType=INTEGER},
      </if>
      <if test="outpatientService != null">
        #{outpatientService,jdbcType=INTEGER},
      </if>
      <if test="hospitalizationNumber != null">
        #{hospitalizationNumber,jdbcType=INTEGER},
      </if>
      <if test="diseaseName != null">
        #{diseaseName,jdbcType=VARCHAR},
      </if>
      <if test="disease != null">
        #{disease,jdbcType=VARCHAR},
      </if>
      <if test="resultLevel != null">
        #{resultLevel,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.hospital.model.Patient">
    update `patient`
    <set>
      <if test="patientName != null">
        patient_name = #{patientName,jdbcType=VARCHAR},
      </if>
      <if test="patientSex != null">
        patient_sex = #{patientSex,jdbcType=VARCHAR},
      </if>
      <if test="patientBirthday != null">
        patient_birthday = #{patientBirthday,jdbcType=TIMESTAMP},
      </if>
      <if test="nationId != null">
        nation_id = #{nationId,jdbcType=INTEGER},
      </if>
      <if test="outpatientService != null">
        outpatient_service = #{outpatientService,jdbcType=INTEGER},
      </if>
      <if test="hospitalizationNumber != null">
        hospitalization_number = #{hospitalizationNumber,jdbcType=INTEGER},
      </if>
      <if test="diseaseName != null">
        disease_name = #{diseaseName,jdbcType=VARCHAR},
      </if>
      <if test="disease != null">
        disease = #{disease,jdbcType=VARCHAR},
      </if>
      <if test="resultLevel != null">
        result_level = #{resultLevel,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=TINYINT},
      </if>
    </set>
    where patient_id = #{patientId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.hospital.model.Patient">
    update `patient`
    set patient_name = #{patientName,jdbcType=VARCHAR},
      patient_sex = #{patientSex,jdbcType=VARCHAR},
      patient_birthday = #{patientBirthday,jdbcType=TIMESTAMP},
      nation_id = #{nationId,jdbcType=INTEGER},
      outpatient_service = #{outpatientService,jdbcType=INTEGER},
      hospitalization_number = #{hospitalizationNumber,jdbcType=INTEGER},
      disease_name = #{diseaseName,jdbcType=VARCHAR},
      disease = #{disease,jdbcType=VARCHAR},
      result_level = #{resultLevel,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=TINYINT}
    where patient_id = #{patientId,jdbcType=INTEGER}
  </update>

    <!--根据科室查询病人-->
    <select id="selectPatientByDepartment"  resultMap="BaseResultMap">
       SELECT patient_id from patient where department_id=#{dId}
    </select>

    <!--查询医生、护士、药师、技师下的病人-->
    <select id="selectPatientByUser"  resultMap="BaseResultMap">
       SELECT patient_id from patient where lead_off=#{leadoff}
    </select>

    <!--根据疾病编码查询病人-->
    <select id="selectPatientByDiseaseCode"  resultMap="BaseResultMap">
       SELECT patient_id from patient WHERE disease BETWEEN #{code1} and #{code2}
    </select>

    <!--根据疾病名称查询病人-->
    <select id="selectPatientByDiseaseName"  resultMap="BaseResultMap">
       SELECT patient_id from patient WHERE disease_name=#{diseaseName}
    </select>

</mapper>